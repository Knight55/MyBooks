<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyBooks.Api</name>
    </assembly>
    <members>
        <member name="T:MyBooks.Api.Controllers.AccountController">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyBooks.Api.Controllers.AccountController.#ctor(Microsoft.AspNetCore.Identity.UserManager{MyBooks.Dal.Entities.ApplicationUser})">
            <summary>
            
            </summary>
            <param name="userManager"></param>
        </member>
        <member name="M:MyBooks.Api.Controllers.AccountController.Post(MyBooks.Dto.Dtos.UserToRegister)">
            <summary>
            
            </summary>
            <param name="userToRegister"></param>
            <returns></returns>
        </member>
        <member name="T:MyBooks.Api.Controllers.AuthorController">
            <summary>
            
            </summary>
        </member>
        <member name="T:MyBooks.Api.Controllers.BooksController">
            <summary>
            Public API controller for books.
            </summary>
        </member>
        <member name="M:MyBooks.Api.Controllers.BooksController.#ctor(MyBooks.Bll.Services.IBookService,AutoMapper.IMapper,MyBooks.Api.Services.IGoodreadsService,Microsoft.Extensions.Logging.ILogger{MyBooks.Api.Controllers.BooksController})">
            <summary>
            Constructor.
            </summary>
            <param name="bookService">The book service.</param>
            <param name="mapper">The object mapper.</param>
            <param name="goodreadsService">The goodreads API service.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:MyBooks.Api.Controllers.BooksController.Get">
            <summary>
            Gets a list of all books.
            </summary>
            <returns>
            Returns all books.
            </returns>
        </member>
        <member name="M:MyBooks.Api.Controllers.BooksController.GetByGoodreadsId(System.String)">
            <summary>
            Gets a specific book with it's goodreads identifier.
            </summary>
            <param name="id">The goodreads identifier of the book.</param>
            <returns>
            A specific book with the given identifier.
            </returns>
        </member>
        <member name="M:MyBooks.Api.Controllers.BooksController.Get(System.Int32)">
            <summary>
            Gets a specific book with the given identifier.
            </summary>
            <param name="id">Identifier of the book.</param>
            <returns>
            Returns a specific book with the given identifier.
            </returns>
            <response code="200">Returns a specific book with the given identifier.</response>
        </member>
        <member name="M:MyBooks.Api.Controllers.BooksController.Search(System.String)">
            <summary>
            
            </summary>
            <param name="searchTerm"></param>
            <returns></returns>
        </member>
        <member name="M:MyBooks.Api.Controllers.BooksController.Post(MyBooks.Dto.Dtos.Book)">
            <summary>
            Insert the given book.
            </summary>
            <param name="book">The book to be inserted.</param>
            <returns>Returns the created book.</returns>
        </member>
        <member name="M:MyBooks.Api.Controllers.BooksController.Put(System.Int32,MyBooks.Dto.Dtos.Book)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="book"></param>
            <returns></returns>
        </member>
        <member name="M:MyBooks.Api.Controllers.BooksController.Delete(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:MyBooks.Api.Exceptions.GoodreadsEntityNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyBooks.Api.Exceptions.GoodreadsEntityNotFoundException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyBooks.Api.Exceptions.GoodreadsEntityNotFoundException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MyBooks.Api.Exceptions.GoodreadsEntityNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:MyBooks.Api.Mapping.MapperConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyBooks.Api.Mapping.MapperConfig.Configure">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyBooks.Api.Options.GoodreadsOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:MyBooks.Api.Options.GoodreadsOptions.BaseUrl">
            <summary>
            
            </summary>
        </member>
        <member name="P:MyBooks.Api.Options.GoodreadsOptions.Key">
            <summary>
            
            </summary>
        </member>
        <member name="P:MyBooks.Api.Options.GoodreadsOptions.Secret">
            <summary>
            
            </summary>
        </member>
        <member name="T:MyBooks.Api.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyBooks.Api.Program.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MyBooks.Api.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:MyBooks.Api.Services.GoodreadsService">
            <summary>
            Default implementation of <see cref="T:MyBooks.Api.Services.IGoodreadsService"/>.
            </summary>
        </member>
        <member name="M:MyBooks.Api.Services.GoodreadsService.#ctor(Microsoft.Extensions.Logging.ILogger{MyBooks.Api.Services.GoodreadsService},System.Net.Http.HttpClient,Microsoft.Extensions.Options.IOptions{MyBooks.Api.Options.GoodreadsOptions})">
            <inheritdoc />
        </member>
        <member name="M:MyBooks.Api.Services.GoodreadsService.SearchBooks(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyBooks.Api.Services.GoodreadsService.GetBook(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyBooks.Api.Services.GoodreadsService.GetAuthor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:MyBooks.Api.Services.IGoodreadsService">
            <summary>
            Public interface for accessing the Goodreads API.
            </summary>
        </member>
        <member name="M:MyBooks.Api.Services.IGoodreadsService.SearchBooks(System.String)">
            <summary>
            Searches for books on Goodreads API.
            </summary>
            <param name="searchTerm"></param>
            <returns>
            A <see cref="T:MyBooks.Dto.Goodreads.GoodreadsResponse"/> containing the books.
            </returns>
        </member>
        <member name="M:MyBooks.Api.Services.IGoodreadsService.GetBook(System.String)">
            <summary>
            Gets a specific book from Goodreads.
            </summary>
            <param name="id">The identifier of the book.</param>
            <returns>
            A <see cref="T:MyBooks.Dto.Goodreads.GoodreadsResponse"/> containing the book.
            </returns>
        </member>
        <member name="M:MyBooks.Api.Services.IGoodreadsService.GetAuthor(System.String)">
            <summary>
            Gets a specific author from Goodreads.
            </summary>
            <param name="id">The identifier of the author</param>
            <returns>
            A <see cref="T:MyBooks.Dto.Goodreads.GoodreadsResponse"/> containing the author.
            </returns>
        </member>
        <member name="T:MyBooks.Api.Startup">
            <summary>
            
            </summary>
        </member>
        <member name="P:MyBooks.Api.Startup.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyBooks.Api.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:MyBooks.Api.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:MyBooks.Api.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,MyBooks.Dal.Context.ApplicationDbContext)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="context"></param>
        </member>
    </members>
</doc>
